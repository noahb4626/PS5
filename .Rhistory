return(x@integral)
}
)
#' @export
# create generic integrateIt method
setGeneric("integrateIt", function(xvals, yvals, a, b, rule) {
standardGeneric("integrateIt")
})
#' @export
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
#' @export
setMethod("integrateIt", function(xvals, yvals, a, b, rule){
#' @export
setMethod("integrateIt", function(xvals, yvals, a, b, rule){
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
# return an object of class Trapezoid
# return values of x & y
# return result
integral <- (h/2)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(c(integral, xvals, yvals, rule))
}
if(rule == "Simpson") {
even_yvals <- yvals[c(TRUE,FALSE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(c(integral, xvals, yvals, rule))
}
}
integrateIt(1:10, 11:20, 1, 10, "Simpson")
#'
#' myX <- c(1:10)
#' myY <- c(11:20)
#' integrateIt(myX, myY, 5, 9, Trapezoid)
#' @seealso \code{\link{Trapezoid}}
#' @seealso \code{\link{Simpson}}
#' @rdname integrateIt
#' @aliases integrateIt
#' @export
# create generic integrateIt method
setGeneric("integrateIt", function(xvals, yvals, a, b, rule) {
standardGeneric("integrateIt")
})
#' @return Area under the curve
#' @author Noah Bardash: \email{noah.bardash@@wustl.edu}
#' @note Print area under the curve of a calculated integral
#' @seealso \code{\link{Trapezoid}}
#' @seealso \code{\link{Simpson}}
#'
#' @rdname print
#' @aliases print
#'
#' @export
setMethod("print", "Trapezoid",
function(x){
return(x@integral)
}
)
#' @export
setMethod("print", "Simpson",
function(x){
return(x@integral)
}
)
#' @return Area under the curve
#' @author Noah Bardash: \email{noah.bardash@@wustl.edu}
#' @note Print area under the curve of a calculated integral
#' @seealso \code{\link{Trapezoid}}
#' @seealso \code{\link{Simpson}}
#'
#' @rdname print
#' @aliases print
#'
#' @export
setMethod("print", "Trapezoid",
function(object){
return(object@integral)
}
)
#' @export
setMethod("print", "Simpson",
function(object){
return(object@integral)
}
)
#' @param xvals a numeric vector
#' @param yvals a numeric vector, same dimensions as \code{xvals}
#' @param integral area under curve using Trapezoid technique
#'
#' @author Noah Bardash: \email{noah.bardash@@wustl.edu}
#' @aliases Trapezoid-class initialize,Trapezoid-method integrateIt,Trapezoid-method print
#' @rdname Trapezoid
#' @seealso \code{\link{integrateIt}}
#'
#' @export
setClass(Class="Trapezoid",
representation = representation(
xvals = "numeric",
yvals = "numeric",
integral = "numeric"
),
prototype = prototype(
xvals = c(),
yvals = c(),
integral = c()
)
)
#' @export
setValidity("door", function(object){
# fill in
}
)
#' @param xvals a numeric vector
#' @param yvals a numeric vector, same dimensions as \code{xvals}
#' @param integral area under curve using Simpson technique
#'
#' @author Noah Bardash: \email{noah.bardash@@wustl.edu}
#' @aliases Simpson-class initialize,Simpson-method integrateIt,Simpson-method print
#' @rdname Simpson
#' @seealso \code{\link{integrateIt}}
#'
#' @export
setClass(Class="Simpson",
representation = representation(
xvals = "numeric",
yvals = "numeric",
integral = "numeric"
),
prototype = prototype(
xvals = c(),
yvals = c(),
integral = c()
)
)
#' @export
setValidity("door", function(object){
if(length(yvals) %% 2 == 0){return("There must be an even number of subdivisions.")}
}
)
#' @export
setMethod("initialize", "Simpson",
function(.Object, ...){
value=callNextMethod()
return(value)
}
)
#'
#' myX <- c(1:10)
#' myY <- c(11:20)
#' integrateIt(myX, myY, 5, 9, Trapezoid)
#' @seealso \code{\link{Trapezoid}}
#' @seealso \code{\link{Simpson}}
#' @rdname integrateIt
#' @aliases integrateIt
#' @export
# create generic integrateIt method
setGeneric("integrateIt", function(xvals, yvals, a, b, rule) {
standardGeneric("integrateIt")
})
#' @export
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Trap")
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("~/Documents/Github") #This will need to be changed to match your directory
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("PS5")
load_all(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("~/Documents/Github") #This will need to be changed to match your directory
current.code <- as.package("PS5")
load_all(current.code)
current.code <- as.package("PS5")
load_all(current.code)
integrateIt <- function(xvals, yvals, a, b, rule){
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
# return an object of class Trapezoid
# return values of x & y
# return result
integral <- (h/2)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(new("Trapezoid", xvals = xvals, yvals = yvals, integral = integral))
}
if(rule == "Simpson") {
even_yvals <- yvals[c(TRUE,FALSE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(new("Simpson", xvals = xvals, yvals = yvals, integral = integral))
}
})
integrateIt <- function(xvals, yvals, a, b, rule){
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
# return an object of class Trapezoid
# return values of x & y
# return result
integral <- (h/2)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(new("Trapezoid", xvals = xvals, yvals = yvals, integral = integral))
}
if(rule == "Simpson") {
even_yvals <- yvals[c(TRUE,FALSE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(new("Simpson", xvals = xvals, yvals = yvals, integral = integral))
}
}
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Trapezoid")
integrateIt <- function(xvals, yvals, a, b, rule){
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
# return an object of class Trapezoid
# return values of x & y
# return result
integral <- (h/2)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(new("Trapezoid", xvals = xvals, yvals = yvals, integral = integral))
}
if(rule == "Simpson") {
even_yvals <- yvals[c(TRUE,FALSE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(new("Simpson", xvals = xvals, yvals = yvals, integral = integral))
}
}
integrateIt(1:11, 11:21, 1, 11, "Trapezoid")
x <- integrateIt(1:11, 11:21, 1, 11, "Trapezoid")
x
x <- integrateIt(1:10, 11:20, 1, 10, "Trapezoid")
x
integrateIt(1:11, 11:21, 1, 11, "Trap")
integrateIt <- function(xvals, yvals, a, b, rule){
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
integral <- (h/2)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(new("Trapezoid", xvals = xvals, yvals = yvals, integral = integral))
}
else if(rule == "Simpson") {
even_yvals <- yvals[c(TRUE,FALSE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(new("Simpson", xvals = xvals, yvals = yvals, integral = integral))
}
else {return("Not a valid rule")}
}
integrateIt(1:11, 11:21, 1, 11, "Trap")
integrateIt(1:11, 11:21, 1, 11, "kl")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
integrateIt <- function(xvals, yvals, a, b, rule){
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
integral <- (h/2)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(new("Trapezoid", xvals = xvals, yvals = yvals, integral = integral))
}
else if(rule == "Simpson") {
even_yvals <- yvals[c(FALSE,TRUE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(new("Simpson", xvals = xvals, yvals = yvals, integral = integral))
}
else {return("Not a valid rule")}
}
integrateIt(1:11, 11:21, 1, 11, "Simpson")
current.code <- as.package("PS5")
load_all(current.code)
setwd("~/Documents/Github") #This will need to be changed to match your directory
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Trap")
current.code <- as.package("PS5")
current.code <- as.package("PS5")
load_all(current.code)
current.code
load_all(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("~/Documents/Github") #This will need to be changed to match your directory
integrateIt(1:10, 11:20, 1, 10, "Trap")
current.code <- as.package("PS5")
current.code <- as.package("integrateIt")
setwd("~/Documents/Github/PS5") #This will need to be changed to match your directory
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
load_all(current.code)
integrateIt(1:10, 11:20, 1, 10, "Trap")
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
document(current.code)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("~/Documents/Github/PS5") #This will need to be changed to match your directory
integrateIt(1:10, 11:20, 1, 10, "Trap")
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "asd")
integrateIt(1:15, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:15, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
integrateIt(1:10, 11:20, 1, 9, "Simpson")
if(object@b - object@start %% 2 != 0){return("There must be an even number of subdivisions.")}
#' @export
setValidity("Simpson", function(object){
if(object@b - object@start %% 2 != 0){return("There must be an even number of subdivisions.")}
if(length(object@xvals) %% 2 == 0){return("There must be an even number of subdivisions.")}
if(length(object@yvals) %% 2 == 0){return("There must be an even number of subdivisions.")}
if(length(object@xvals) != length(object@yvals)){return("There must be the same number of x & y values.")}
if(length(object@xvals) < 2 | length(object@yvals) < 2){return("There must be at least two points.")}
}
)
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 9, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
#' @export
setValidity("Simpson", function(object){
if(length(object@xvals) %% 2 != 0){return("There must be an even number of subdivisions.")}
if(length(object@yvals) %% 2 == 0){return("There must be an even number of subdivisions.")}
if(length(object@xvals) != length(object@yvals)){return("There must be the same number of x & y values.")}
if(length(object@xvals) < 2 | length(object@yvals) < 2){return("There must be at least two points.")}
}
)
#' @export
setValidity("Simpson", function(object){
if(length(object@xvals) %% 2 != 0){return("There must be an even number of subdivisions.")}
if(length(object@yvals) %% 2 == 0){return("There must be an even number of subdivisions.")}
if(length(object@xvals) != length(object@yvals)){return("There must be the same number of x & y values.")}
if(length(object@xvals) < 2 | length(object@yvals) < 2){return("There must be at least two points.")}
}
)
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
#' @export
setValidity("Simpson", function(object){
if(length(object@xvals) %% 2 != 0){return("There MUST be an even number of subdivisions.")}
if(length(object@yvals) %% 2 == 0){return("There must be an even number of subdivisions.")}
if(length(object@xvals) != length(object@yvals)){return("There must be the same number of x & y values.")}
if(length(object@xvals) < 2 | length(object@yvals) < 2){return("There must be at least two points.")}
}
)
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
#' @export
setValidity("Simpson", function(object){
if(length(object@yvals) %% 2 == 0){return("There must be an even number of subdivisions.")}
if(length(object@xvals) != length(object@yvals)){return("There must be the same number of x & y values.")}
if(length(object@xvals) < 2 | length(object@yvals) < 2){return("There must be at least two points.")}
}
)
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
## Load libraries and set working directory
library(devtools)
library(roxygen2)
setwd("~/Documents/Github/PS5") #This will need to be changed to match your directory
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
document(current.code)
load_all(current.code)
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
load_all(current.code)
integrateIt(1:10, 11:20, 1, 10, "Trap")
#' @export
setMethod(f = "integrateIt", definition = function(xvals = "numeric", yvals = "numeric", a = "numeric", b = "numeric", rule = "String"){
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
# return an object of class Trapezoid
# return values of x & y
# return result
integral <- (h/22)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(new("Trapezoid", xvals, yvals, integral))
}
if(rule == "Simpson") {
even_yvals <- yvals[c(FALSE,TRUE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(new("Simpson", xvals, yvals, integral))
}
})
integrateIt(1:10, 11:20, 1, 10, "Trap")
sintegrateIt <- function(xvals, yvals, a, b, rule){
if(length(xvals) != length(yvals)) {return("Error, there must be the same number of x & y values.")}
xvals <- xvals[a]:xvals[b]
yvals <- yvals[a]:yvals[b]
n <- length(xvals) - 1
h <- (b-a)/n
if(rule == "Trap") {
integral <- (h/2)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
return(new("Trapezoid", xvals, yvals, integral))
}
else if(rule == "Simpson") {
even_yvals <- yvals[c(FALSE,TRUE)]
integral <- (h/3)*(2*sum(yvals) - yvals[1] - yvals[length(yvals)])
integral <- integral + (h/3)*(2*sum(even_yvals))
return(new("Simpson", xvals, yvals, integral))
}
else {return("Not a valid rule")}
}
sintegrateIt(1:11, 11:21, 1, 11, "Simpson")
?integrateIt
## This can be run many times as the code is updates
library(testthat)
current.code <- as.package("integrateIt")
current.code
current.code <- as.package("integrateIt")
load_all(current.code)
current.code <- as.package("integrateIt")
load_all(current.code)
document(current.code)
integrateIt(1:10, 11:20, 1, 10, "Trap")
integrateIt(1:10, 11:20, 1, 10, "Simpson")
integrateIt(1:11, 11:21, 1, 11, "Simpson")
